# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!

# In production, make sure to set $OCTOPARTS_SECRET to something more secure.
# You can use 'sbt playGenerateSecret' to generate a value.

play.crypto.secret = "super-secret"
play.crypto.secret = ${?OCTOPARTS_SECRET}

# The application languages
# ~~~~~
play.i18n.langs = ["en", "ja"]

# By default, the environment is "dev". If the PLAY_ENV environment variable
# is set, then use that instead
application.env = "dev"
application.env = ${?PLAY_ENV}

# Application Loader class
# ~~~~~
play.application.loader=com.m3.octoparts.wiring.OctopartsApplicationLoader

# Evolutions
# ~~~~~
dbplugin=disabled
evolutionplugin=disabled

# Logger
# ~~~~~
# No, we use application-logger.xml instead.

db {
  default {
    driver="org.postgresql.Driver"

    url=${?OCTOPARTS_DB_URL} # e.g. "jdbc:postgresql://mydb:5432/octoparts"

    # DB user is "octoparts_app" by default, can be overriden using OCTOPARTS_DB_USER environment variable
    user="octoparts_app"
    user=${?OCTOPARTS_DB_USER}

    # DB password should be set using OCTOPARTS_DB_PASSWORD environment variable
    password=${?OCTOPARTS_DB_PASSWORD}

    # Connection pool settings
    poolInitialSize=10
    poolMaxSize=20

    # Migrate automatically on startup in Production mode
    migration.auto = true
    migration.placeholderPrefix="$flyway{{{"
    migration.placeholderSuffix="}}}"
    migration.validateOnMigrate = true
    migration.validateOnMigrate = ${?OCTOPARTS_DB_VALIDATE_ON_MIGRATE}
  }
}

timeouts {
  # The timeout (in milliseconds) for a request to the AggregateRequest API
  asyncRequestTimeout = 10000

  # The maximum (in milliseconds) time to wait for all PartRequests to complete before returning an AggregateResponse.
  # The client can set their own timeout on a per-request basis. This value is an overriding maximum.
  maximumAggregateReqTimeout = 5000
}

urls {
  # Some links to be displayed on the admin screen. Any links whose URLs are not set will not be displayed.

  # The URL of your Kibana dashboard
  # e.g. "http://kibana1/kibana/#/dashboard/elasticsearch/Octoparts"
  kibana = ${?OCTOPARTS_KIBANA_URL}

  # The URL of your Hystrix dashboard
  # e.g. "http://hystrix1/dashboard/monitor/monitor.html?stream=http%3A%2F%2Foctoparts%3A9000%2Fhystrix.stream"
  hystrixDashboard = ${?OCTOPARTS_HYSTRIX_DASHBOARD_URL}

  # The URL of a wiki or other page containing documentation about Octoparts, if you have one
  # e.g. "http://wiki/Octoparts"
  wiki = ${?OCTOPARTS_WIKI_URL}

  # The URL of the Swagger UI
  swaggerUI = "/swagger-ui"
}

hystrix {
  # How often to output Hystrix metrics logs
  logging.intervalMs = 60 seconds
}

caching {
  # Setting this to true disables caching completely.
  # All config info will be read from the DB every time, and API responses will not be cached.
  disabled = false

  # Set this to true to use a simple in-memory cache instead of Memcached. NOT recommended for production.
  inmemory = false

  # Settings for the Executor used for handling cache requests
  pool.size = 10
  queue.size = 256

  # Controls how big the in-memory version cache can get. Set to 0 to disable.
  versionCachingSize = 100000
}

memcached {
  protocol = "Binary" # Should be one of "Binary" or "Text"
  host = ${?OCTOPARTS_MEMCACHED_HOSTS} # e.g. "memcache1:11211 memcache2:11211"
  timeout = 50 # Timeout in ms

  # Authentication (optional)
  user = ${?OCTOPARTS_MEMCACHED_USER}
  password = ${?OCTOPARTS_MEMCACHED_PASSWORD}

  # local configs cache expiry time (in milliseconds). Enabling this improves response time and reduces network load.
  # While configs are being cached locally, config changes initiated on other machines will not be reflected.
  # Comment out or set to a value <= 0 to disable this feature.
  configLocalBuffer = 10000

  # number of random checks to perform when checking memcached health.
  # 0 means "use always the same key"
  monitoring.randomChecks = 10
}

# When this is true, client cache-control headers are ignored.
read-client-cache.disabled = false

# Customise this with your app's base path (incl. port number if relevant)
swagger.api.basepath = "http://octoparts.youdomain.com"
swagger.api.basepath = ${?OCTOPARTS_SWAGGER_BASEPATH}

# Custom ExecutionContexts
contexts {

  # We wrap all DB accesses in Futures, using a dedicated ExecutionContext to avoid blocking the global one.
  db {
    fork-join-executor {
      parallelism-factor = 10.0
      parallelism-max = 20
    }
  }

  future-timeout {
    fork-join-executor {
      parallelism-max = 4
    }
  }

  parts-service {
    fork-join-executor {
      parallelism-max = 4
    }
  }

}


# If this is set, then Octoparts will do Zipkin tracing for you. Otherwise, it doesn't.
zipkin {
  host = ${?OCTOPARTS_ZIPKIN_HOST}
  port = ${?OCTOPARTS_ZIPKIN_PORT}
  sampleRate = ${?OCTOPARTS_ZIPKIN_SAMPLE_RATE}
}

# Proxy Override
# The mapping from meta.proxyId (taken from X-OCTOPARTS-PROXY-ID HTTP header) to proxy URL
proxies = [
  # { id: "proxy1", url: "http://proxy1:8080" }
]

play.modules.disabled += "play.api.db.DBModule"